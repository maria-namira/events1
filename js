"use strict";(self.webpackChunkahj_8_1_sse_ws_frontend=self.webpackChunkahj_8_1_sse_ws_frontend||[]).push([[179],{991:()=>{new class{constructor(s){"string"==typeof s&&(this.popup=document.querySelector(s)),this.popup=s,this.popupForm=document.forms.nickname,this.chatForm=document.forms.chat,this.popupInput=this.popupForm.elements.name,this.chatInput=this.chatForm.elements.message,this.user=null,this.ws=null,this.baseURL="wss://ahj-8-1-sse-ws-sergius.herokuapp.com/",this.listUsers=document.querySelector(".users__list"),this.listMessages=document.querySelector(".messages__list"),this.onMessage=this.onMessage.bind(this),this.onPopupSubmit=this.onPopupSubmit.bind(this),this.onChatSubmit=this.onChatSubmit.bind(this)}init(){this.popupForm.addEventListener("submit",this.onPopupSubmit),this.chatForm.addEventListener("submit",this.onChatSubmit),this.popupInput.focus()}onPopupSubmit(s){s.preventDefault(),this.popupInput.validity.valid?(this.popupInput.className="popup__input",this.popupInput.placeholder="Введите псевдоним",this.user=this.popupInput.value,console.log(this.user),this.ws=new WebSocket(this.baseURL),this.ws.binaryType="blob",this.ws.addEventListener("open",(()=>{const s=JSON.stringify({type:"registration",name:this.user});this.ws.send(s),console.log("connected")})),this.ws.addEventListener("close",(s=>{console.log("connection closed",s)})),this.ws.addEventListener("error",(s=>{console.log("error:",s)})),this.ws.addEventListener("message",this.onMessage)):this.changePlaceholder("Заполните пожалуйста это поле")}onChatSubmit(s){if(s.preventDefault(),""!==this.chatInput.value){const s=JSON.stringify({type:"message",content:this.chatInput.value,name:this.user});this.ws.send(s),this.chatInput.value="",console.log("Сообщение отправлено")}}onMessage(s){const e=JSON.parse(s.data);"registration"===e.type&&(e.success?(this.popupInput.value="",this.hidePopup(),this.chatInput.focus(),this.drawListUsers(e.activeUsers),this.drawListMessages(e.messages)):e.error?(this.changePlaceholder("Ошибка сервера"),console.log(e.error)):this.changePlaceholder("Это имя уже занято")),"message"===e.type&&(e.success?this.drawListMessages(e.messages):(this.showError(),console.log(e.error))),"update"===e.type&&(e.success?this.drawListUsers(e.activeUsers):(this.showError(),console.log(e.error)))}showError(){this.listMessages.insertAdjacentHTML("beforeend",'<div class="error">\n       <div class="error__body">\n         <div class="error__content">Ошибка сервера</div>\n       </div>\n     </div>'),setTimeout((()=>{this.hideError()}),3e3)}hideError(){document.querySelector(".error").remove()}markUpUser(s){let e;return e=s===this.user?"mine":"",`<li class="users__item ${e}">\n              <div class="users__avatar"></div>\n              <div class="users__name">${s}</div>\n            </li>`}markUpMessage(s,e,t){let i;return i=s===this.user?"mine":"",`<li class="messages__item message ${i}">\n    <div class="message__wrapper">\n      <div class="message__title">\n        <span class="message__name">${s}</span>\n        <span class="message__data">${this.cleanDate(e)}</span>\n      </div>\n      <div class="message__content">\n        ${t}\n      </div>\n    </div>\n  </li>`}cleanDate(s){const e=s.split(" ");return this.date=[e[1],e[0].slice(0,-1)].join(" "),this.date}changePlaceholder(s){this.popupInput.className="popup__input",this.popupInput.value="",this.popupInput.placeholder=s,this.popupInput.classList.add("red")}drawListMessages(s){s.length>0&&(this.listMessages.innerHTML="",s.forEach((s=>{this.listMessages.insertAdjacentHTML("beforeend",this.markUpMessage(s.name,s.created,s.message))})))}drawListUsers(s){s.length>0&&(this.listUsers.innerHTML="",s.forEach((s=>{this.listUsers.insertAdjacentHTML("beforeend",this.markUpUser(s))})))}hidePopup(){this.popup.className="popup visually_hidden"}}(document.querySelector(".popup")).init()}},s=>{var e;e=991,s(s.s=e)}]);
